@page "/"
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using FormValidationLibrary.ViewModels
@inject MainViewModel ViewModel


<div class="container">
    <ViewModelRegion ViewModel="@ViewModel">
        <div class="row" style="display: flex; flex-wrap: wrap">
            <div class="col-sm mx-1">
                <div class="card bg-light">
                    <div class="card-header">
                        Bitte geben Sie Ihre persönlichen Angaben ein
                    </div>

                    <div class="card-body">
                        <div class="form-group">

                            <EditForm Model="@ViewModel" OnValidSubmit="ViewModel.ResetCommandExecute">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <label for="firstName" class="font-weight-bold">Vorname:</label>
                                <OnInputText id="firstName" class="form-control" @bind-Value="ViewModel.FirstName" />
                                <br />

                                <label for="lastName" class="font-weight-bold">Nachname:</label>
                                <OnInputText id="lastName" class="form-control" @bind-Value="ViewModel.LastName" />
                                <br />

                                <label for="emailAddress" class="font-weight-bold">E-Mail-Adresse:</label>
                                <OnInputText id="emailAddress" class="form-control" @bind-Value="ViewModel.EmailAddress" />
                                <br />

                                <label for="phoneNumber" class="font-weight-bold">Telefonnummer:</label>
                                <OnInputText id="phoneNumber" class="form-control" @bind-Value="ViewModel.PhoneNumber" />
                                <br />

                                <label for="iban" class="font-weight-bold">IBAN:</label>
                                <OnInputText id="iban" class="form-control" @bind-Value="ViewModel.Iban" />
                                <br />

                                <button id="reset" type="submit" class="@btnResetCss" disabled="@isResetDisabled">Neu Starten</button>
                                <br />
                            </EditForm>

                        </div>
                    </div>
                </div>
            </div>

            <div class="col-sm mx-1">
                <div class="card bg-light">
                    <div class="card-header">
                        Fortschritt in Prozent
                    </div>

                    <div class="card-body">
                        <ChartJsPieChart @ref="_pieChartJs" Config="@_config" />
                    </div>
                </div>
            </div>

        </div>
    </ViewModelRegion>
</div>

@code {
    private PieConfig _config;
    private ChartJsPieChart _pieChartJs;
    private double lastProgress = 100;

    private bool isResetDisabled { get => ViewModel.Progress<100; }

    private string btnResetCss { get; set; } = "btn btn-dark form-control" ;

    protected override void OnInitialized()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "Fortschritt in Prozent"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true

                },
                CutoutPercentage = 20
            }
        };

        _config.Data.Labels.AddRange(new[] {"Abgeschlossen", "Offen"});

        UpdateChart();
    }

    protected override bool ShouldRender()
    {
        btnResetCss = isResetDisabled ? "btn btn-dark form-control" : "btn btn-primary form-control";

        UpdateChart();

        return base.ShouldRender();
    }

    void UpdateChart()
    {
        var pieSet = new PieDataset
        {
            BackgroundColor = new[] { ColorUtil.ColorString(0, 179, 0), ColorUtil.ColorString(179, 0 , 0) },
            BorderWidth = 1,
            HoverBackgroundColor =  new[] { ColorUtil.ColorString(0, 128, 0), ColorUtil.ColorString(128, 0 , 0) },
            HoverBorderColor = ColorUtil.ColorString(13, 13, 13),
            HoverBorderWidth = 2,
            BorderColor = "#262626",
        };

        if (ViewModel.Progress != lastProgress)
        {
            _config.Data.Datasets.Clear();

            pieSet.Data.AddRange(new double[] {ViewModel.Progress, (100-ViewModel.Progress)});
            _config.Data.Datasets.Add(pieSet);

            lastProgress = ViewModel.Progress;
        }
    }
}